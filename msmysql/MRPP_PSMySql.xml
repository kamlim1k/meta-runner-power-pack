#
# Script.ps1
#
<#
<?xml version="1.0" encoding="UTF-8"?>
<meta-runner name="PSMySql">
  <description>A PowerShell wrapper for mysql</description>
  <settings>
    <parameters>
      <param name="mr.PSMySql.LoginPath" value="" spec="text description='Read options from the named login path in the .mylogin.cnf login file.' display='normal' label='Login Path:'" />
      <param name="mr.PSMySql.DbName" value="" spec="text description='Databse name to use.' display='normal' label='Database Name:' validationMode='not_empty'" />
      <param name="mr.PSMySql.BackupType" value="" spec="select data_1='Schema' data_2='Data' data_3='Both' description='Type of backup to perform' display='normal' label='Backup Type:'" />      
      <param name="mr.PSMySql.BackupFile" value="" spec="text description='Backup file location' display='normal' label='Backup File:'" />
      <param name="mr.PSMySql.MySqlPath" value="" spec="text description='Optinal musql path. Leave it empty if mysql path added to path environment variable.' display='normal' label='MySql Path:'" />
      <param name="mr.PSMySql.Debug" value="SilentlyContinue" spec="checkbox checkedValue='Continue' description='Log debug messages?' display='normal' label='Debug:' uncheckedValue='SilentlyContinue'" />
      <param name="mr.PSMySql.Verbose" value="SilentlyContinue" spec="checkbox checkedValue='Continue' description='Log verbose messages?' display='normal' label='Verbose:' uncheckedValue='SilentlyContinue'" />
    </parameters>
    <build-runners>
      <runner name="PSMySql" type="jetbrains_powershell">
        <parameters>
          <param name="jetbrains_powershell_execution" value="PS1" />
          <param name="jetbrains_powershell_minVersion" value="3.0" />
          <param name="jetbrains_powershell_noprofile" value="true" />
          <param name="jetbrains_powershell_errorToError" value="error" />
          <param name="jetbrains_powershell_script_mode" value="CODE" />
          <param name="jetbrains_powershell_bitness" value="x86" />
          <param name="teamcity.step.mode" value="default" />
          <param name="jetbrains_powershell_script_code">
            <![CDATA[			   
#>

function MySql-IsExist {
    param($loginPath, $dbName)
    
    begin {
        $exe = 'C:\Program Files (x86)\MySQL\MySQL Server 5.6\bin\mysql.exe'
    }
    process { 
        $databases = echo "show databases" | & $exe --login-path=$loginPath
        if ($databases -ne $null) {
            $databases.Contains($dbName)
        }
        else {
            return $false
        }
    }
    end {
    }
    
}

function Invoke-MySql-Backup {
    param()
    
    begin {
        $exe = 'C:\Program Files (x86)\MySQL\MySQL Server 5.6\bin\mysql.exe'
        $args = @()
        
        Write-Verbose $("{0} [EXEC]" -f $MyInvocation.MyCommand)
        if([String]::IsNullOrWhiteSpace($mr.MySqlPath) -eq $false) {
			Write-Debug "MySql path not speficied. Assuming mysql added to path environment variable"	
            		
		}
        else {
            $exe = $mr.MySqlPath | Join-Path -ChildPath "mysql.exe" 
        }
    }
    process {

        if($mr.BackupType -eq "Schema") {
            $args += "--no-data"            
        }
        elseif($mr.BackupType -eq "Data") {
            $args += "--no-create-info"
        }

        $args += "--result-file $mr.BuildFile"

        if (MySql-IsExist -loginPath $mr.LoginPath -dbName $mr.DbName) {
            & $exe $args 
        } 
    }
    end {
    }
}

function Invoke-Executable {
	param(
		[Parameter(ValueFromPipeline=$true)]
		[String]$Exe,
		[Array]$Parameters = @(),
		[ScriptBlock]$Before = {},
		[ScriptBlock]$After = {}
	)
	begin {
		Write-Verbose $("{0} [EXEC]" -f $MyInvocation.MyCommand)
		Write-Debug $("Invoking '{0}'" -f $Exe)
		$Parameters | % {Write-Debug $_} -Begin {Write-Debug "With arguments:"}
	}
	
	process {
		& $Before
		& $Exe $Parameters | Out-String
		$success = $?	
		
		if($success -eq $false) {
			throw $("failed to execute {0}" -f $Exe)
		}
		
		& $After
	}
}

function Invoke-Exit {
	param(
		[Int]$ExitCode
	)
	
	[System.Environment]::Exit($ExitCode)
}

function Set-PSConsole {
  try {
        $max = $host.UI.RawUI.MaxPhysicalWindowSize
        if($max) {
        $host.UI.RawUI.BufferSize = New-Object System.Management.Automation.Host.Size(9999,9999)
        $host.UI.RawUI.WindowSize = New-Object System.Management.Automation.Host.Size($max.Width,$max.Height)
    }
    } catch {}
}

$mr = @{
	    
	LoginPath = "%mr.PSMySql.LoginPath%"
	DbName = "%mr.PSMySql.DbName%"
	BackupType = "%mr.PSMySql.BackupType%"
	BackupFile = "%mr.PSMySql.BackupFile%"
	MySqlPath = "%mr.PSMySql.MySqlPath%"
}

$VerbosePreference = "%mr.PSMySql.Verbose%"
$DebugPreference = "%mr.PSMySql.Debug%"
$TeamCityMode = if($env:TEAMCITY_VERSION) {$true} else {$false}

if ($TeamCityMode) {
    Set-PSConsole
#	  Resolve-TeamCityParameters
}

try {
	Invoke-MySql-Backup -ea:Stop
} catch {
	Write-Error $_
	Invoke-Exit 1
}


 <# ]]>
          </param>
        </parameters>
      </runner>
    </build-runners>
    <requirements />
  </settings>
</meta-runner>
#> 
